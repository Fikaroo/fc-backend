// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  SUPPLIER
  ADMIN
  SUPER_ADMIN
}

// Dairy
// 1.	Milk
// 2.	Cream
// 3.	Butter
// 4.	Cheese
// Meat
// 1.	Beef
// 2.	Mutton
// 3.	Veal
// 4.	Chicken
// 5.	Turkey
// Fruits&Vegetables
// 1.	Vegetables
// 2.	Fruits
// 3.	Greens
// 4.	Berries
// Bakery
// 1.	Bread
// 2.	Сakes
// 3.	Cookies
// Drinks
// 1.	Tea
// 2.	Coffee
// 3.	Fresh Juice

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String   @default("")
  address   String   @default("")
  role      Role
  // orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Billboars {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  parentId       String?    @db.ObjectId
  parentCategory Category?  @relation("ParentCategory", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  subcategories  Category[] @relation("ParentCategory")
  products       Product[]  @relation(fields: [productIDs], references: [id])
  productIDs     String[]   @db.ObjectId
  billboars      Billboars? @relation(fields: [billboarsId], references: [id])
  billboarsId    String?    @db.ObjectId
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([parentId, productIDs, billboarsId])
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  stock       Int
  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]   @db.ObjectId
  supplier    Supplier   @relation(fields: [supplierId], references: [id])
  supplierId  String     @db.ObjectId
  isFeatured  Boolean    @default(false)
  isArchived  Boolean    @default(false)
  imageUrl    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // orderItems  OrderItem[]

  @@index([categoryIDs])
}

// enum Status {
//   PENDING
//   SHIPPED
//   DELIVERED
//   CANCELLED
// }

model Supplier {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Unit {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  variants  Variant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([unitId])
}

// model Review {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   rating     Int
//   comment    String?
//   reviewDate DateTime

//   product   Product @relation(fields: [productId], references: [id])
//   productId String  @db.ObjectId

//   customer   Customer @relation(fields: [customerId], references: [id])
//   customerId String   @db.ObjectId
// }

// model Order {
//   id          String      @id @default(auto()) @map("_id") @db.ObjectId
//   orderDate   DateTime
//   totalAmount Float
//   isPaid      Boolean     @default(false)
//   user        User        @relation(fields: [userId], references: [id])
//   userId      String      @db.ObjectId
//   orderItems  OrderItem[]
// }

// model OrderItem {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   quantity  Int
//   subtotal  Float
//   order     Order   @relation(fields: [orderId], references: [id])
//   orderId   String  @db.ObjectId
//   product   Product @relation(fields: [productId], references: [id])
//   productId String  @db.ObjectId
// }
